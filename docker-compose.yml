version: '2'

services:

  nginx:
    image: nginx:1.13.1
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - conf:/etc/nginx/conf.d
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - certs:/etc/nginx/certs
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true"

  dockergen:
    image: jwilder/docker-gen:0.7.3
    container_name: nginx-proxy-gen
    depends_on:
      - nginx
    command: -notify-sighup nginx-proxy -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes:
      - conf:/etc/nginx/conf.d
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - certs:/etc/nginx/certs
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-proxy-le
    depends_on:
      - nginx
      - dockergen
    environment:
      NGINX_PROXY_CONTAINER: nginx-proxy
      NGINX_DOCKER_GEN_CONTAINER: nginx-proxy-gen
    volumes:
      - conf:/etc/nginx/conf.d
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - certs:/etc/nginx/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro

  owncloud:
    image: owncloud/server:${OC_VERSION}
    restart: always
    container_name: owncloud
    expose:
      - 443
    depends_on:
      - mariadb
      - redis
      - letsencrypt
    environment:
      - OWNCLOUD_DOMAIN=${OC_DOMAIN}
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=${DB_NAME}
      - OWNCLOUD_DB_USERNAME=${DB_USERNAME}
      - OWNCLOUD_DB_PASSWORD=${DB_PASSWORD}
      - OWNCLOUD_DB_HOST=mariadb
      - OWNCLOUD_ADMIN_USERNAME=${OC_ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${OC_ADMIN_PASSWORD}
      - OWNCLOUD_UTF8MB4_ENABLED=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=redis
      - VIRTUAL_HOST=${OC_DOMAIN}
      - LETSENCRYPT_HOST=${OC_DOMAIN}
      - LETSENCRYPT_EMAIL=admin@***REMOVED***.de
      - LETSENCRYPT_TEST=true
    volumes:
      - files:/mnt/data

  webmail:
    image: nginx:1.13.1
    restart: always
    container_name: webmail
    depends_on:
      - letsencrypt
    environment:
      - VIRTUAL_HOST=${MAIL_DOMAIN}
      - LETSENCRYPT_HOST=${MAIL_DOMAIN}
      - LETSENCRYPT_EMAIL=admin@***REMOVED***.de
      - LETSENCRYPT_TEST=true

  mail:
    image: tvial/docker-mailserver:latest
    hostname: mail
    domainname: ***REMOVED***.de
    container_name: mail
    depends_on:
      - letsencrypt
    ports:
      - "25:25"
      - "143:143"
      - "587:587"
      - "993:993"
    volumes:
      - maildata:/var/mail
      - mailstate:/var/mail-state
      - ./config/:/tmp/docker-mailserver/
      - certs:/etc/letsencrypt/live/
    environment:
      - ENABLE_SPAMASSASSIN=1
      - ENABLE_CLAMAV=1
      - ENABLE_FAIL2BAN=1
      - ENABLE_POSTGREY=1
      - ONE_DIR=1
      - DMS_DEBUG=0
      - SSL_TYPE=manual
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE

  mariadb:
    build:
      context: ./
      dockerfile: mariadb-build
    image: mariadb-***REMOVED***:latest
    restart: always
    container_name: mariadb-***REMOVED***
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - SBFSPOT_USERNAME=${DB_SBFSPOT_USERNAME}
      - SBFSPOT_PASSWORD=${DB_SBFSPOT_PASSWORD}
      - VOLKSZ_USERNAME=${DB_VOLKSZ_USERNAME}
      - VOLKSZ_PASSWORD=${DB_VOLKSZ_PASSWORD}
    volumes:
      - mysql:/var/lib/mysql
      - backup:/var/lib/backup

  redis:
    image: webhippie/redis:latest
    container_name: owncloud-redis
    restart: always
    environment:
      - REDIS_DATABASES=1
    volumes:
      - redis:/var/lib/redis

volumes:
  conf:
    driver: local
  vhost:
    driver: local
  html:
    driver: local
  certs:
    driver: local
  files:
    driver: local
  mysql:
    driver: local
  backup:
    driver: local
  redis:
    driver: local
  maildata:
    driver: local
  mailstate:
    driver: local

# Do not forget to 'docker network create nginx-proxy' before launch, and to add '--network nginx-proxy' to proxied containers.
networks:
  default:
    external:
      name: nginx-proxy

